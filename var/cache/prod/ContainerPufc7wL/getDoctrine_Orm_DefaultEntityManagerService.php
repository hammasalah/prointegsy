<?php

namespace ContainerPufc7wL;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProdContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        $a = ($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService'));

        if (isset($container->services['doctrine.orm.default_entity_manager'])) {
            return $container->services['doctrine.orm.default_entity_manager'];
        }
        $b = ($container->privates['doctrine.dbal.default_connection.event_manager'] ?? $container->load('getDoctrine_Dbal_DefaultConnection_EventManagerService'));

        if (isset($container->services['doctrine.orm.default_entity_manager'])) {
            return $container->services['doctrine.orm.default_entity_manager'];
        }
        $c = new \Doctrine\ORM\Configuration();

        $d = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();
        $d->addDriver(new \Doctrine\ORM\Mapping\Driver\AttributeDriver([0 => (\dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Entity')], true), 'App\\Entity');

        $c->setEntityNamespaces(['App' => 'App\\Entity']);
        $c->setMetadataCache(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $c->setQueryCache(($container->privates['doctrine.system_cache_pool'] ?? $container->load('getDoctrine_SystemCachePoolService')));
        $c->setResultCache(($container->privates['doctrine.result_cache_pool'] ?? $container->load('getDoctrine_ResultCachePoolService')));
        $c->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($d, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $c->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $c->setProxyNamespace('Proxies');
        $c->setAutoGenerateProxyClasses(false);
        $c->setSchemaIgnoreClasses([]);
        $c->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $c->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $c->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $c->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $c->setTypedFieldMapper(new \Doctrine\ORM\Mapping\DefaultTypedFieldMapper());
        $c->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $c->setLazyGhostObjectEnabled(true);
        $c->setIdentityGenerationPreferences([]);
        $c->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\ApplicationsRepository' => ['privates', 'App\\Repository\\ApplicationsRepository', 'getApplicationsRepositoryService', true],
            'App\\Repository\\CategoryRepository' => ['privates', 'App\\Repository\\CategoryRepository', 'getCategoryRepositoryService', true],
            'App\\Repository\\CommentsRepository' => ['privates', 'App\\Repository\\CommentsRepository', 'getCommentsRepositoryService', true],
            'App\\Repository\\ConversionRepository' => ['privates', 'App\\Repository\\ConversionRepository', 'getConversionRepositoryService', true],
            'App\\Repository\\EventsRepository' => ['privates', 'App\\Repository\\EventsRepository', 'getEventsRepositoryService', true],
            'App\\Repository\\FeedPostsRepository' => ['privates', 'App\\Repository\\FeedPostsRepository', 'getFeedPostsRepositoryService', true],
            'App\\Repository\\GroupFeedPostsRepository' => ['privates', 'App\\Repository\\GroupFeedPostsRepository', 'getGroupFeedPostsRepositoryService', true],
            'App\\Repository\\GroupMembersRepository' => ['privates', 'App\\Repository\\GroupMembersRepository', 'getGroupMembersRepositoryService', true],
            'App\\Repository\\HistoriquePointsRepository' => ['privates', 'App\\Repository\\HistoriquePointsRepository', 'getHistoriquePointsRepositoryService', true],
            'App\\Repository\\JobsRepository' => ['privates', 'App\\Repository\\JobsRepository', 'getJobsRepositoryService', true],
            'App\\Repository\\LikesRepository' => ['privates', 'App\\Repository\\LikesRepository', 'getLikesRepositoryService', true],
            'App\\Repository\\MessagesRepository' => ['privates', 'App\\Repository\\MessagesRepository', 'getMessagesRepositoryService', true],
            'App\\Repository\\ParticipationRepository' => ['privates', 'App\\Repository\\ParticipationRepository', 'getParticipationRepositoryService', true],
            'App\\Repository\\ReviewsRepository' => ['privates', 'App\\Repository\\ReviewsRepository', 'getReviewsRepositoryService', true],
            'App\\Repository\\RewardsRepository' => ['privates', 'App\\Repository\\RewardsRepository', 'getRewardsRepositoryService', true],
            'App\\Repository\\RouletteRepository' => ['privates', 'App\\Repository\\RouletteRepository', 'getRouletteRepositoryService', true],
            'App\\Repository\\SharesRepository' => ['privates', 'App\\Repository\\SharesRepository', 'getSharesRepositoryService', true],
            'App\\Repository\\TransactionArgentRepository' => ['privates', 'App\\Repository\\TransactionArgentRepository', 'getTransactionArgentRepositoryService', true],
            'App\\Repository\\UserGroupsRepository' => ['privates', 'App\\Repository\\UserGroupsRepository', 'getUserGroupsRepositoryService', true],
            'App\\Repository\\UserIntrestsRepository' => ['privates', 'App\\Repository\\UserIntrestsRepository', 'getUserIntrestsRepositoryService', true],
            'App\\Repository\\UserMessagesRepository' => ['privates', 'App\\Repository\\UserMessagesRepository', 'getUserMessagesRepositoryService', true],
            'App\\Repository\\UserProfileRepository' => ['privates', 'App\\Repository\\UserProfileRepository', 'getUserProfileRepositoryService', true],
            'App\\Repository\\UserRewardsRepository' => ['privates', 'App\\Repository\\UserRewardsRepository', 'getUserRewardsRepositoryService', true],
            'App\\Repository\\UsersRepository' => ['privates', 'App\\Repository\\UsersRepository', 'getUsersRepositoryService', true],
            'App\\Repository\\VisiteUtilisateurRepository' => ['privates', 'App\\Repository\\VisiteUtilisateurRepository', 'getVisiteUtilisateurRepositoryService', true],
            'App\\Repository\\WorkerRaitingsRepository' => ['privates', 'App\\Repository\\WorkerRaitingsRepository', 'getWorkerRaitingsRepositoryService', true],
        ], [
            'App\\Repository\\ApplicationsRepository' => '?',
            'App\\Repository\\CategoryRepository' => '?',
            'App\\Repository\\CommentsRepository' => '?',
            'App\\Repository\\ConversionRepository' => '?',
            'App\\Repository\\EventsRepository' => '?',
            'App\\Repository\\FeedPostsRepository' => '?',
            'App\\Repository\\GroupFeedPostsRepository' => '?',
            'App\\Repository\\GroupMembersRepository' => '?',
            'App\\Repository\\HistoriquePointsRepository' => '?',
            'App\\Repository\\JobsRepository' => '?',
            'App\\Repository\\LikesRepository' => '?',
            'App\\Repository\\MessagesRepository' => '?',
            'App\\Repository\\ParticipationRepository' => '?',
            'App\\Repository\\ReviewsRepository' => '?',
            'App\\Repository\\RewardsRepository' => '?',
            'App\\Repository\\RouletteRepository' => '?',
            'App\\Repository\\SharesRepository' => '?',
            'App\\Repository\\TransactionArgentRepository' => '?',
            'App\\Repository\\UserGroupsRepository' => '?',
            'App\\Repository\\UserIntrestsRepository' => '?',
            'App\\Repository\\UserMessagesRepository' => '?',
            'App\\Repository\\UserProfileRepository' => '?',
            'App\\Repository\\UserRewardsRepository' => '?',
            'App\\Repository\\UsersRepository' => '?',
            'App\\Repository\\VisiteUtilisateurRepository' => '?',
            'App\\Repository\\WorkerRaitingsRepository' => '?',
        ])));

        $container->services['doctrine.orm.default_entity_manager'] = $instance = new \Doctrine\ORM\EntityManager($a, $c, $b);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
